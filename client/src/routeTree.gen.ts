/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as RentalsRouteImport } from './pages/rentals/route'
import { Route as DashboardRouteImport } from './pages/_dashboard/route'
import { Route as AuthRouteImport } from './pages/_auth/route'
import { Route as IndexImport } from './pages/index'
import { Route as DashboardGamesImport } from './pages/_dashboard/games'
import { Route as AuthRegisterImport } from './pages/_auth/register'
import { Route as AuthLoginImport } from './pages/_auth/login'

// Create/Update Routes

const RentalsRouteRoute = RentalsRouteImport.update({
  id: '/rentals',
  path: '/rentals',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardGamesRoute = DashboardGamesImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/rentals': {
      id: '/rentals'
      path: '/rentals'
      fullPath: '/rentals'
      preLoaderRoute: typeof RentalsRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/_dashboard/games': {
      id: '/_dashboard/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof DashboardGamesImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardGamesRoute: typeof DashboardGamesRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardGamesRoute: DashboardGamesRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof DashboardRouteRouteWithChildren
  '/rentals': typeof RentalsRouteRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/games': typeof DashboardGamesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof DashboardRouteRouteWithChildren
  '/rentals': typeof RentalsRouteRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/games': typeof DashboardGamesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/rentals': typeof RentalsRouteRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_dashboard/games': typeof DashboardGamesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/rentals' | '/login' | '/register' | '/games'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/rentals' | '/login' | '/register' | '/games'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_dashboard'
    | '/rentals'
    | '/_auth/login'
    | '/_auth/register'
    | '/_dashboard/games'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  RentalsRouteRoute: typeof RentalsRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  RentalsRouteRoute: RentalsRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_dashboard",
        "/rentals"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard/route.tsx",
      "children": [
        "/_dashboard/games"
      ]
    },
    "/rentals": {
      "filePath": "rentals/route.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_dashboard/games": {
      "filePath": "_dashboard/games.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
